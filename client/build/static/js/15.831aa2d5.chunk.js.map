{"version":3,"sources":["views/TemplateTree/TemplateModal.js","views/TemplateTree/TemplateTree.js","views/Containers/DefaultLayout/DefaultAside.js"],"names":["renderInput","input","meta","label","FormGroup","Label","Input","invalid","touched","FormFeedback","className","error","reduxForm","form","validate","values","errors","tname","connect","state","verrors","tmodal","syncErrors","tplTree","actions","setTplModalVisible","addNewTemplate","setUpdating","resetTForm","removeTemplateFolder","handleOk","a","modalAction","selected","handleCancel","title","visible","tmlVisible","onOk","onCancel","footer","key","onClick","type","disabled","loading","selectedLabel","isTemplate","Field","name","component","useTreeItemStyles","makeStyles","theme","root","color","palette","text","secondary","backgroundColor","action","hover","grey","content","borderTopRightRadius","spacing","borderBottomRightRadius","paddingRight","fontWeight","typography","fontWeightMedium","fontWeightRegular","group","marginLeft","paddingLeft","expanded","labelRoot","display","alignItems","padding","labelIcon","marginRight","labelText","flexGrow","useStyles","height","maxWidth","dataExtract","common","imgUpload","setExpanded","setSelected","listImg","setModalAction","classes","onNewTemplate","onNewFolder","onRename","onRemove","menuFile","style","width","Item","Divider","StyledTreeItem","props","LabelIcon","bgColor","other","TreeItem","overlay","trigger","Typography","variant","onSelected","event","value","TreeView","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","onNodeSelect","onNodeToggle","nodeIds","treeData","renderNode","isLeaf","nodeId","DescriptionOutlinedIcon","FolderOpenIcon","children","map","data","Search","DefaultAside","onLeave","toggleAsideApp","this","loadTplTree","setNLPFlag","setActiveAsideTab","onMouseLeave","Fragment","Nav","tabs","NavItem","NavLink","classNames","active","activeAsideTab","TabContent","activeTab","TabPane","tabId","marginBottom","placeholder","size","checked","nlpFlag","onChange","Component"],"mappings":"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","file":"static/js/15.831aa2d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { FormGroup, Label, Input, FormFeedback } from \"reactstrap\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport * as actions from \"../../actions\";\r\n\r\n// const handleOk = async (e, setTplModalVisible, addNewTemplate, selected) => {\r\n//   const res = await addNewTemplate(selected, \"test\", false);\r\n//   setTplModalVisible(false);\r\n// };\r\n\r\nconst validate = values => {\r\n  const errors = {};\r\n  //console.log(`values ${values}`);\r\n  if (!values.tname) {\r\n    errors.tname = \"Name can not be blank!\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst renderInput = ({ input, meta, label }) => (\r\n  <FormGroup>\r\n    <Label>{label}</Label>\r\n    <Input {...input} invalid={meta.invalid && meta.touched} />\r\n    <FormFeedback className=\"help-block\">{meta.error}</FormFeedback>\r\n  </FormGroup>\r\n);\r\n\r\nconst TemplateModal = ({\r\n  tplTree,\r\n  setTplModalVisible,\r\n  addNewTemplate,\r\n  setUpdating,\r\n  resetTForm,\r\n  removeTemplateFolder,\r\n  values,\r\n  errors\r\n}) => {\r\n  const handleOk = async () => {\r\n    //console.log(values);\r\n    let res;\r\n    setUpdating(true);\r\n\r\n    switch (tplTree.modalAction) {\r\n      case \"New Template\":\r\n        res = await addNewTemplate(tplTree.selected, values.tname, true);\r\n        setUpdating(false);\r\n        resetTForm();\r\n        setTplModalVisible(false);\r\n        return;\r\n      case \"New Folder\":\r\n        res = await addNewTemplate(tplTree.selected, values.tname, false);\r\n        setUpdating(false);\r\n        resetTForm();\r\n        setTplModalVisible(false);\r\n        return;\r\n      case \"Delete Confirmation\":\r\n        res = await removeTemplateFolder(tplTree.selected);\r\n        setUpdating(false);\r\n        setTplModalVisible(false);\r\n      default:\r\n        setUpdating(false);\r\n        setTplModalVisible(false);\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTplModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        title={tplTree.modalAction}\r\n        visible={tplTree.tmlVisible}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        footer={[\r\n          <Button key=\"back\" onClick={handleCancel}>\r\n            {`${\r\n              tplTree.modalAction === \"Delete Confirmation\" ? \"No\" : \"Cancel\"\r\n            }`}\r\n          </Button>,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={\r\n              !(errors === null) &&\r\n              !(tplTree.modalAction === \"Delete Confirmation\")\r\n            }\r\n            loading={tplTree.loading}\r\n            onClick={handleOk}\r\n          >\r\n            {`${\r\n              tplTree.modalAction === \"Delete Confirmation\" ? \"Yes\" : \"Submit\"\r\n            }`}\r\n          </Button>\r\n        ]}\r\n      >\r\n        {tplTree.modalAction === \"Delete Confirmation\" ? (\r\n          <div>\r\n            Are you sure to delete the\r\n            <strong>\r\n              {` ${tplTree.selectedLabel}  ${\r\n                tplTree.isTemplate ? \"Template ?\" : \"Folder ?\"\r\n              }`}\r\n            </strong>\r\n          </div>\r\n        ) : (\r\n          <form>\r\n            <Field name=\"tname\" label=\"Name\" component={renderInput} />\r\n          </form>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  //console.log(this.state);\r\n  let verrors = null;\r\n  if (state.form.tmodal && state.form.tmodal.syncErrors) {\r\n    verrors = state.form.tmodal.syncErrors;\r\n  }\r\n\r\n  if (state.form.tmodal && state.form.tmodal.values) {\r\n    return {\r\n      errors: verrors,\r\n      values: state.form.tmodal.values,\r\n      tplTree: state.tplTree\r\n    };\r\n  } else {\r\n    return { errors: verrors, values: [], tplTree: state.tplTree };\r\n  }\r\n};\r\n\r\nexport default reduxForm({ form: \"tmodal\", validate })(\r\n  connect(mapStateToProps, actions)(TemplateModal)\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions\";\r\nimport { Menu, Dropdown } from \"antd\";\r\n\r\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\r\nimport DescriptionOutlinedIcon from \"@material-ui/icons/DescriptionOutlined\";\r\nimport TemplateModal from \"./TemplateModal\";\r\n\r\nconst useTreeItemStyles = makeStyles(theme => ({\r\n  root: {\r\n    color: theme.palette.text.secondary,\r\n    \"&:hover > $content\": {\r\n      backgroundColor: theme.palette.action.hover\r\n    },\r\n    \"&:focus > $content, &$selected > $content\": {\r\n      backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n      color: \"var(--tree-view-color)\"\r\n    },\r\n    \"&:focus > $content $label, &:hover > $content $label, &$selected > $content $label\": {\r\n      backgroundColor: \"transparent\"\r\n    }\r\n  },\r\n  content: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(0),\r\n    borderBottomRightRadius: theme.spacing(0),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    \"$expanded > &\": {\r\n      fontWeight: theme.typography.fontWeightRegular\r\n    }\r\n  },\r\n  group: {\r\n    marginLeft: 0,\r\n    \"& $content\": {\r\n      paddingLeft: theme.spacing(2)\r\n    }\r\n  },\r\n  expanded: {},\r\n  selected: {},\r\n  label: {\r\n    fontWeight: \"inherit\",\r\n    color: \"inherit\"\r\n  },\r\n  labelRoot: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0.5, 0)\r\n  },\r\n  labelIcon: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  labelText: {\r\n    fontWeight: \"inherit\",\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 550,\r\n    flexGrow: 1,\r\n    maxWidth: 700\r\n  }\r\n});\r\n\r\nconst TemplateTree = ({\r\n  common,\r\n  tplTree,\r\n  setExpanded,\r\n  setSelected,\r\n  imgUpload,\r\n  listImg,\r\n  setTplModalVisible,\r\n  removeTemplateFolder,\r\n  setModalAction\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const onNewTemplate = () => {\r\n    setModalAction(\"New Template\");\r\n    setTplModalVisible(true);\r\n  };\r\n\r\n  const onNewFolder = () => {\r\n    setModalAction(\"New Folder\");\r\n    setTplModalVisible(true);\r\n  };\r\n\r\n  const onRename = () => {\r\n    setModalAction(\"Rename\");\r\n  };\r\n\r\n  const onRemove = () => {\r\n    setModalAction(\"Delete Confirmation\");\r\n    setTplModalVisible(true);\r\n    //removeTemplateFolder(tplTree.selected);\r\n  };\r\n\r\n  const menuFile = (\r\n    <Menu style={{ width: \"200px\" }}>\r\n      <Menu.Item key=\"1\">Edit</Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"2\">Copy</Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"3\">Rename</Menu.Item>\r\n      <Menu.Item key=\"4\" onClick={onRemove}>\r\n        Delete\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const menuFolder = () => (\r\n    <Menu style={{ width: \"200px\" }}>\r\n      <Menu.Item key=\"1\" onClick={onNewTemplate}>\r\n        New Template\r\n      </Menu.Item>\r\n      <Menu.Item key=\"2\" onClick={onNewFolder}>\r\n        New Folder\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"3\">Copy</Menu.Item>\r\n      <Menu.Item key=\"0\">Paste</Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"4\" onClick={onRename}>\r\n        Rename\r\n      </Menu.Item>\r\n      <Menu.Item key=\"5\" onClick={onRemove}>\r\n        Delete\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const StyledTreeItem = props => {\r\n    const classes = useTreeItemStyles();\r\n    const {\r\n      labelText,\r\n      labelIcon: LabelIcon,\r\n      color,\r\n      bgColor,\r\n      isTemplate,\r\n      setTplModalVisible,\r\n      ...other\r\n    } = props;\r\n    return (\r\n      <TreeItem\r\n        label={\r\n          <Dropdown\r\n            overlay={isTemplate ? menuFile : menuFolder(setTplModalVisible)}\r\n            trigger={[\"contextMenu\"]}\r\n          >\r\n            <div className={classes.labelRoot}>\r\n              <LabelIcon color=\"inherit\" className={classes.labelIcon} />\r\n              <Typography variant=\"body2\" className={classes.labelText}>\r\n                {labelText}\r\n              </Typography>\r\n            </div>\r\n          </Dropdown>\r\n        }\r\n        style={{\r\n          \"--tree-view-color\": color,\r\n          \"--tree-view-bg-color\": bgColor\r\n        }}\r\n        classes={{\r\n          root: classes.root,\r\n          content: classes.content\r\n        }}\r\n        {...other}\r\n      />\r\n    );\r\n  };\r\n\r\n  StyledTreeItem.propTypes = {\r\n    bgColor: PropTypes.string,\r\n    color: PropTypes.string,\r\n    labelIcon: PropTypes.elementType.isRequired,\r\n    labelInfo: PropTypes.string,\r\n    labelText: PropTypes.string.isRequired,\r\n    isTemplate: PropTypes.bool,\r\n    setTplModalVisible: PropTypes.func\r\n  };\r\n\r\n  const renderNode = treeData => (\r\n    <StyledTreeItem\r\n      isTemplate={treeData.isLeaf}\r\n      key={treeData.nodeId}\r\n      labelText={treeData.label}\r\n      nodeId={treeData.nodeId}\r\n      labelIcon={treeData.isLeaf ? DescriptionOutlinedIcon : FolderOpenIcon}\r\n      color=\"#ffffff\"\r\n      bgColor=\"#1890ff\"\r\n    >\r\n      {treeData.children\r\n        ? treeData.children.map(data => renderNode(data))\r\n        : null}\r\n    </StyledTreeItem>\r\n  );\r\n\r\n  const onSelected = async (event, value) => {\r\n    await setSelected(value, common, imgUpload);\r\n  };\r\n\r\n  return [\r\n    <TreeView\r\n      key=\"1\"\r\n      className={classes.root}\r\n      defaultCollapseIcon={<ArrowDropDownIcon />}\r\n      defaultExpandIcon={<ArrowRightIcon />}\r\n      defaultEndIcon={<div style={{ width: 24 }} />}\r\n      selected={tplTree.selected}\r\n      expanded={tplTree.expanded}\r\n      onNodeSelect={(event, value) => onSelected(event, value)}\r\n      onNodeToggle={(event, nodeIds) => setExpanded(nodeIds)}\r\n    >\r\n      {tplTree.treeData[0] ? renderNode(tplTree.treeData[0]) : null}\r\n    </TreeView>,\r\n    <TemplateModal key=\"2\" />\r\n  ];\r\n};\r\n\r\nconst mapStateToProps = ({ dataExtract, common, imgUpload, tplTree }) => {\r\n  return { dataExtract, common, imgUpload, tplTree };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(TemplateTree);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  TabContent,\r\n  TabPane,\r\n  FormGroup\r\n} from \"reactstrap\";\r\nimport classNames from \"classnames\";\r\nimport { AppSwitch } from \"@coreui/react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Input } from \"antd\";\r\nimport * as actions from \"../../../actions\";\r\nimport TemplateTree from \"../../TemplateTree/TemplateTree\";\r\n\r\nconst { Search } = Input;\r\n\r\nclass DefaultAside extends Component {\r\n  //classes = useStyles();\r\n  componentDidMount() {\r\n    this.props.loadTplTree();\r\n  }\r\n\r\n  onLeave = () => {\r\n    this.props.toggleAsideApp();\r\n  };\r\n\r\n  render() {\r\n    // eslint-disable-next-line\r\n    const { dataExtract, setNLPFlag, common, setActiveAsideTab } = this.props;\r\n\r\n    return (\r\n      <div onMouseLeave={this.onLeave}>\r\n        <React.Fragment>\r\n          <Nav tabs>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classNames({\r\n                  active: common.activeAsideTab === \"1\"\r\n                })}\r\n                onClick={() => {\r\n                  setActiveAsideTab(\"1\");\r\n                }}\r\n              >\r\n                <i className=\"icon-list\"></i>\r\n              </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n              <NavLink\r\n                className={classNames({\r\n                  active: common.activeAsideTab === \"2\"\r\n                })}\r\n                onClick={() => {\r\n                  setActiveAsideTab(\"2\");\r\n                }}\r\n              >\r\n                <i className=\"icon-settings\"></i>\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <TabContent activeTab={common.activeAsideTab}>\r\n            <TabPane tabId=\"1\" className=\"p-3 m-3\">\r\n              <FormGroup>\r\n                <Search\r\n                  style={{ marginBottom: 8 }}\r\n                  placeholder=\"Search template\"\r\n                />\r\n\r\n                {<TemplateTree />}\r\n              </FormGroup>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\" className=\"p-3\">\r\n              <h6>Settings</h6>\r\n              <div className=\"aside-options\">\r\n                <div className=\"clearfix mt-4\">\r\n                  <small>\r\n                    <b>NLP Spell checker</b>\r\n                  </small>\r\n                  <AppSwitch\r\n                    className={\"float-right\"}\r\n                    variant={\"pill\"}\r\n                    label\r\n                    color={\"success\"}\r\n                    size={\"sm\"}\r\n                    checked={dataExtract.nlpFlag === 1 ? true : false}\r\n                    onChange={() =>\r\n                      setNLPFlag(dataExtract.nlpFlag === 1 ? 0 : 1)\r\n                    }\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <small className=\"text-muted\">\r\n                    Enable NLP for name and address spell checking\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </TabPane>\r\n          </TabContent>\r\n        </React.Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// DefaultAside.propTypes = propTypes;\r\n// DefaultAside.defaultProps = defaultProps;\r\n\r\nconst mapStateToProps = ({ dataExtract, common, imgUpload, tplTree }) => {\r\n  return { dataExtract, common, imgUpload, tplTree };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(DefaultAside);\r\n"],"sourceRoot":""}