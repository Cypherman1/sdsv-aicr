{"version":3,"sources":["views/DataExtraction/ExtractFields.js","views/DataExtraction/ExtractForm.js","views/EditorLib/components/imagemap/AICRImageEditorToolbar.js","views/EditorLib/components/imagemap/AICRImageEditor.js","views/DataExtraction/DataExtraction.js"],"names":["TextInputField","input","label","meta","FormGroup","Label","Input","ImageField","source","src","value","alt","className","renderCheckBox","ischecked","check","type","checked","undefined","renderCheckBoxesField","name","checkboxes","ischeckedarr","row","Col","xs","md","map","checkbox","key","id","Field","component","renderCheckBoxField","renderTextField","props","ExtractForm","componentDidMount","a","getExtractTemplate","common","selectedTemplate","formValues","rfields","this","extractTemplate","template_config_fields","field","data_type","push","field_name","field_label","options","group_type","i","sources","length","renderImageField","renderFields","Component","reduxForm","form","connect","state","eform","values","actions","TreeNode","TreeSelect","AICRImageEditorToolbar","onChange","imgUpload","setSelected","canvasRef","tplTree","selectedItem","isCropping","handler","interactionMode","flex","sm","style","width","marginLeft","selected","dropdownStyle","maxHeight","overflow","placeholder","treeDefaultExpandAll","treeData","renderNode","nodeId","title","children","data","Row","shape","disabled","cropHandler","validType","onClick","start","icon","tooltipTitle","i18n","t","cropRect","finish","cancel","saveImage","duplicate","remove","transactionHandler","undos","undo","Icon","marginRight","redos","redo","dataExtract","propertiesToInclude","defaultOption","fill","stroke","strokeUniform","resource","link","enabled","dashboard","tooltip","template","animation","loop","autoplay","delay","duration","userProperty","trigger","script","effect","AICRImageEditor","zoomRatio","preview","loading","progress","animations","styles","dataSources","editing","descriptors","canvasHandlers","onAdd","target","forceUpdate","changeEditing","select","onSelect","getObjects","forEach","obj","animationHandler","initAnimation","setState","onRemove","onModified","debounce","onZoom","zoom","changedValues","allValues","changedKey","Object","keys","changedValue","workarea","onChangeWokarea","unicode","uni","parseInt","set","String","fromCodePoint","filterKey","filterValue","filters","rgb","r","g","b","imageHandler","applyFilterByType","gamma","brightness","contrast","saturation","rotation","noise","blocksize","compiled","SandBox","compile","chartOption","setChartOptionStr","elementHandler","setById","error","console","assign","shadow","setShadow","blur","offsetX","offsetY","setImageById","superType","setObject","lockMovementX","lockMovementY","hasControls","hoverCursor","editable","locked","scaleToResize","height","originScaleToResize","canvas","centerObject","requestRenderAll","workareaHandler","setImage","setLayout","onTooltip","ref","Math","random","count","window","open","url","document","location","href","onContext","event","left","layerX","top","layerY","SubMenu","transformList","item","option","newItem","Item","padding","itemsRef","renderItem","toGroup","toActiveSelection","duplicateById","removeById","onTransaction","transaction","handlers","onChangePreview","exportJSON","objects","filter","importJSON","clear","onProgress","onImport","files","showLoading","setTimeout","reader","FileReader","onprogress","e","lengthComputable","loaded","total","onload","JSON","parse","result","stringify","onloadend","onerror","readAsText","onUpload","inputEl","createElement","accept","hidden","onchange","body","appendChild","click","onDownload","exportDatas","anchorEl","encodeURIComponent","download","onChangeAnimations","onChangeStyles","onChangeDataSources","onSaveImage","saveCanvasImage","shortcutHandlers","esc","addEventListener","keyCode","reduce","prev","curr","concat","setMainMenuId","setAimvCanvasRef","then","action","Fragment","CommonButton","tooltipPlacement","okText","cancelText","onConfirm","placement","titleContent","content","ImageMapTitle","c","container","Canvas","minZoom","keyEvent","ImageMapFooterToolbar","ImageMapPreview","Container","notification","config","bottom","DataExtraction","openNotificationWithIcon","description","message","handlePreview","file","resetForm","setCurrentImg","aimvCanvasRef","handleRemove","info","delImg","listImg","uid","selectedTemplateId","handleChange","uploadImg","originFileObj","formData","FormData","append","res","success","fileList","setHasError","hasError","err","handleClick","setLoading","extractData","cuid","currentImg","substring","lastIndexOf","nlpFlag","uploadButton","PlusOutlined","lg","Card","CardHeader","listType","onPreview","backgroundColor","borderColor","CardBody"],"mappings":"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","file":"static/js/18.602f20f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Col, FormGroup, Label, Input } from \"reactstrap\";\r\nimport { Field } from \"redux-form\";\r\n\r\nexport const TextInputField = ({ input, meta, label }) => (\r\n  <FormGroup>\r\n    <Label> {label}</Label>\r\n    <Input {...input} />\r\n  </FormGroup>\r\n);\r\n\r\nexport const ImageField = ({ input, meta, label, source }) => {\r\n  return (\r\n    <FormGroup>\r\n      <Label>{label}</Label>\r\n      <img\r\n        src={!input.value ? \"\" : `data:image/jpeg;base64,${input.value}`}\r\n        alt=\"\"\r\n        className=\"form-control aicr-image\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport const renderCheckBox = ({ input, meta, label, ischecked }) => (\r\n  <FormGroup check className=\"checkbox\">\r\n    <Input\r\n      {...input}\r\n      className=\"form-check-input\"\r\n      type=\"checkbox\"\r\n      checked={ischecked === undefined ? false : ischecked}\r\n    />\r\n    <Label check className=\"form-check-label\">\r\n      {label}\r\n    </Label>\r\n  </FormGroup>\r\n);\r\n\r\nexport const renderCheckBoxField = (name, label, ischecked) => (\r\n  <Field\r\n    name={name}\r\n    label={label}\r\n    component={renderCheckBox}\r\n    ischecked={ischecked}\r\n  />\r\n);\r\n\r\nexport const renderCheckBoxesField = (\r\n  name,\r\n  label,\r\n  checkboxes,\r\n  ischeckedarr\r\n) => (\r\n  <FormGroup row>\r\n    <Col xs=\"12\" md=\"5\">\r\n      <Label> {label}</Label>\r\n    </Col>\r\n    <Col xs=\"12\" md=\"7\">\r\n      {checkboxes.map(checkbox => {\r\n        return (\r\n          <div key={checkbox.id}>\r\n            {renderCheckBoxField(\r\n              `${name}.${checkbox.name}`,\r\n              checkbox.label,\r\n              ischeckedarr === undefined ? false : ischeckedarr[checkbox.name]\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </Col>\r\n  </FormGroup>\r\n);\r\n\r\nexport const renderTextField = (name, label) => (\r\n  <Field\r\n    name={name}\r\n    props={{ type: \"text\" }}\r\n    component={TextInputField}\r\n    {...{ label }}\r\n  />\r\n);\r\n\r\nexport const renderImageField = (name, label, source) => (\r\n  <Field\r\n    name={name}\r\n    source={source}\r\n    props={{ type: \"image\" }}\r\n    component={ImageField}\r\n    {...{ label }}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions\";\r\nimport { renderTextField, renderCheckBoxesField, renderImageField } from \"./ExtractFields\";\r\n\r\nclass ExtractForm extends Component {\r\n  componentDidMount = async () => {\r\n    await this.props.getExtractTemplate(this.props.common.selectedTemplate);\r\n  };\r\n\r\n  renderFields(formValues) {\r\n    let rfields = [];\r\n    if (\r\n      !(this.props.common.extractTemplate === undefined) &&\r\n      !(this.props.common.extractTemplate.template_config_fields === undefined)\r\n    ) {\r\n      this.props.common.extractTemplate.template_config_fields.map(field => {\r\n        switch (field.data_type) {\r\n          case \"text\":\r\n            rfields.push(\r\n              <div key={field.id}>\r\n                {renderTextField(field.field_name, field.field_label)}\r\n              </div>\r\n            );\r\n            break;\r\n          case \"checkboxes\":\r\n            //console.log(field.value);\r\n            rfields.push(\r\n              <div key={field.id}>\r\n                {renderCheckBoxesField(\r\n                  field.field_name,\r\n                  field.field_label,\r\n                  field.options,\r\n                  formValues[field.field_name]\r\n                )}\r\n              </div>\r\n            );\r\n            break;\r\n          case \"group\":\r\n            if (field.group_type === \"combine\") {\r\n              rfields.push(\r\n                <div key={field.id}>\r\n                  {renderTextField(field.field_name, field.field_label)}\r\n                </div>\r\n              );\r\n            } else {\r\n              for (let i = 0; i < field.sources.length; i++) {\r\n                const source = field.sources[i];\r\n                rfields.push(\r\n                  <div key={source.id}>\r\n                    {renderTextField(source.field_name, source.field_label)}\r\n                  </div>\r\n                );\r\n              }\r\n            }\r\n            break;\r\n          case \"image\":\r\n            rfields.push(\r\n              <div key={field.id}>\r\n                {renderImageField(field.field_name, field.field_label)}\r\n              </div>\r\n            );\r\n            break;\r\n          default:\r\n        }\r\n      });\r\n    }\r\n    return rfields;\r\n  }\r\n  render() {\r\n    const { formValues } = this.props;\r\n    //console.log(formValues);\r\n    return (\r\n      <form className=\"form-horizontal\">{this.renderFields(formValues)}</form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  //console.log(this.state);\r\n  if (state.form.eform && state.form.eform.values) {\r\n    return { formValues: state.form.eform.values, common: state.common };\r\n  } else {\r\n    return { formValues: [], common: state.common };\r\n  }\r\n};\r\n\r\nExtractForm = reduxForm({ form: \"eform\" })(\r\n  connect(mapStateToProps, actions)(ExtractForm)\r\n);\r\nexport default ExtractForm;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport i18n from \"i18next\";\r\n\r\nimport { FlexBox, FlexItem } from \"../flex\";\r\nimport ImageMapList from \"./ImageMapList\";\r\nimport { CommonButton } from \"../common\";\r\nimport Icon from \"../icon/Icon\";\r\nimport { Col, Row, Label } from \"reactstrap\";\r\nimport { TreeSelect } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../actions\";\r\n\r\nconst { TreeNode } = TreeSelect;\r\n\r\nconst renderNode = treeData => (\r\n  <TreeNode\r\n    value={treeData.nodeId}\r\n    title={treeData.label}\r\n    key={treeData.nodeId}\r\n  >\r\n    {treeData.children ? treeData.children.map(data => renderNode(data)) : null}\r\n  </TreeNode>\r\n);\r\n\r\nclass AICRImageEditorToolbar extends Component {\r\n  static propTypes = {\r\n    canvasRef: PropTypes.any,\r\n    selectedItem: PropTypes.object\r\n  };\r\n  state = {\r\n    value: undefined\r\n  };\r\n\r\n  onChange = async value => {\r\n    const { common, imgUpload, setSelected } = this.props;\r\n    await setSelected(value, common, imgUpload);\r\n  };\r\n\r\n  render() {\r\n    const { canvasRef, selectedItem, tplTree } = this.props;\r\n    const isCropping = canvasRef\r\n      ? canvasRef.handler.interactionMode === \"crop\"\r\n      : false;\r\n    return (\r\n      <FlexBox\r\n        className=\"rde-editor-header-toolbar-container pt-2 pb-5\"\r\n        flex=\"1\"\r\n      >\r\n        <Col className=\"pl-0\" xs=\"12\" sm=\"6\">\r\n          <FlexItem className=\"rde-canvas-toolbar rde-canvas-toolbar-list\">\r\n            <Label className=\"pt-2 pl-2\">Template</Label>\r\n            <TreeSelect\r\n              style={{ width: \"100%\", marginLeft: \"10px\" }}\r\n              value={tplTree.selected}\r\n              dropdownStyle={{ maxHeight: 400, overflow: \"auto\" }}\r\n              placeholder=\"Please select\"\r\n              treeDefaultExpandAll\r\n              onChange={this.onChange}\r\n            >\r\n              {tplTree.treeData[0] ? renderNode(tplTree.treeData[0]) : null}\r\n            </TreeSelect>\r\n          </FlexItem>\r\n        </Col>\r\n        <Col xs=\"12\" sm=\"6\" className=\"justify-content-end\">\r\n          <Row className=\"justify-content-end\">\r\n            <FlexItem className=\"rde-canvas-toolbar rde-canvas-toolbar-crop\">\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                shape=\"circle\"\r\n                disabled={\r\n                  canvasRef ? !canvasRef.handler.cropHandler.validType() : true\r\n                }\r\n                onClick={() => canvasRef.handler.cropHandler.start()}\r\n                icon=\"crop\"\r\n                tooltipTitle={i18n.t(\"action.crop\")}\r\n              />\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                shape=\"circle\"\r\n                disabled={\r\n                  canvasRef ? !canvasRef.handler.cropHandler.cropRect : true\r\n                }\r\n                onClick={() => canvasRef.handler.cropHandler.finish()}\r\n                icon=\"check\"\r\n                tooltipTitle={i18n.t(\"action.crop-save\")}\r\n              />\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                shape=\"circle\"\r\n                disabled={\r\n                  canvasRef ? !canvasRef.handler.cropHandler.cropRect : true\r\n                }\r\n                onClick={() => canvasRef.handler.cropHandler.cancel()}\r\n                icon=\"times\"\r\n                tooltipTitle={i18n.t(\"action.crop-cancel\")}\r\n              />\r\n            </FlexItem>\r\n            <FlexItem className=\"rde-canvas-toolbar rde-canvas-toolbar-operation\">\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                shape=\"circle\"\r\n                disabled={isCropping}\r\n                onClick={() => canvasRef.handler.saveImage()}\r\n                icon=\"image\"\r\n                tooltipTitle={i18n.t(\"action.image-save\")}\r\n              />\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                shape=\"circle\"\r\n                disabled={isCropping}\r\n                onClick={() => canvasRef.handler.duplicate()}\r\n                icon=\"clone\"\r\n                tooltipTitle={i18n.t(\"action.clone\")}\r\n              />\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                shape=\"circle\"\r\n                disabled={isCropping}\r\n                onClick={() => canvasRef.handler.remove()}\r\n                icon=\"trash\"\r\n                tooltipTitle={i18n.t(\"action.delete\")}\r\n              />\r\n            </FlexItem>\r\n            <FlexItem className=\"rde-canvas-toolbar rde-canvas-toolbar-history\">\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                disabled={\r\n                  isCropping ||\r\n                  (canvasRef &&\r\n                    !canvasRef.handler.transactionHandler.undos.length)\r\n                }\r\n                onClick={() => canvasRef.handler.transactionHandler.undo()}\r\n              >\r\n                <Icon name=\"undo-alt\" style={{ marginRight: 8 }} />\r\n                Undo\r\n              </CommonButton>\r\n              <CommonButton\r\n                className=\"rde-action-btn\"\r\n                disabled={\r\n                  isCropping ||\r\n                  (canvasRef &&\r\n                    !canvasRef.handler.transactionHandler.redos.length)\r\n                }\r\n                onClick={() => canvasRef.handler.transactionHandler.redo()}\r\n              >\r\n                Redo\r\n                <Icon name=\"redo-alt\" style={{ marginLeft: 8 }} />\r\n              </CommonButton>\r\n            </FlexItem>\r\n          </Row>\r\n        </Col>\r\n      </FlexBox>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ imgUpload, dataExtract, common, tplTree }) => {\r\n  return { imgUpload, dataExtract, common, tplTree };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(AICRImageEditorToolbar);\r\n\r\n//export default AICRImageEditorToolbar;\r\n","import React, { Component } from \"react\";\r\nimport { Badge, Button, Popconfirm, Menu } from \"antd\";\r\nimport debounce from \"lodash/debounce\";\r\nimport i18n from \"i18next\";\r\n\r\nimport ImageMapFooterToolbar from \"./ImageMapFooterToolbar\";\r\nimport ImageMapItems from \"./ImageMapItems\";\r\nimport ImageMapTitle from \"./ImageMapTitle\";\r\nimport AICRImageEditorToolbar from \"./AICRImageEditorToolbar\";\r\nimport ImageMapPreview from \"./ImageMapPreview\";\r\nimport ImageMapConfigurations from \"./ImageMapConfigurations\";\r\nimport SandBox from \"../sandbox/SandBox\";\r\nimport ImageFields from \"./ImageFields\";\r\n\r\nimport \"../../libs/fontawesome-5.2.0/css/all.css\";\r\nimport \"../../styles/index.scss\";\r\nimport Container from \"../common/Container\";\r\nimport CommonButton from \"../common/CommonButton\";\r\nimport Canvas from \"../canvas/Canvas\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../actions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propertiesToInclude = [\r\n  \"id\",\r\n  \"name\",\r\n  \"locked\",\r\n  \"file\",\r\n  \"src\",\r\n  \"link\",\r\n  \"tooltip\",\r\n  \"animation\",\r\n  \"layout\",\r\n  \"workareaWidth\",\r\n  \"workareaHeight\",\r\n  \"videoLoadType\",\r\n  \"autoplay\",\r\n  \"shadow\",\r\n  \"muted\",\r\n  \"loop\",\r\n  \"code\",\r\n  \"icon\",\r\n  \"userProperty\",\r\n  \"trigger\",\r\n  \"configuration\",\r\n  \"superType\",\r\n  \"points\",\r\n  \"svg\",\r\n  \"loadType\"\r\n];\r\n\r\nconst defaultOption = {\r\n  fill: \"rgba(0, 0, 255, 0.1)\",\r\n  stroke: \"rgba(255, 255, 255, 0)\",\r\n  strokeUniform: true,\r\n  resource: {},\r\n  link: {\r\n    enabled: false,\r\n    type: \"resource\",\r\n    state: \"new\",\r\n    dashboard: {}\r\n  },\r\n  tooltip: {\r\n    enabled: true,\r\n    type: \"resource\",\r\n    template: \"<div>{{message.name}}</div>\"\r\n  },\r\n  animation: {\r\n    type: \"none\",\r\n    loop: true,\r\n    autoplay: true,\r\n    delay: 100,\r\n    duration: 1000\r\n  },\r\n  userProperty: {},\r\n  trigger: {\r\n    enabled: false,\r\n    type: \"alarm\",\r\n    script: \"return message.value > 0;\",\r\n    effect: \"style\"\r\n  }\r\n};\r\n\r\nclass AICRImageEditor extends Component {\r\n  state = {\r\n    selectedItem: null,\r\n    zoomRatio: 1,\r\n    preview: false,\r\n    loading: false,\r\n    progress: 0,\r\n    animations: [],\r\n    styles: [],\r\n    dataSources: [],\r\n    editing: false,\r\n    descriptors: {}\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { imgUpload, common, setMainMenuId, setAimvCanvasRef } = this.props;\r\n    this.showLoading(true);\r\n    setMainMenuId(2);\r\n    import(\"./Descriptors.json\").then(descriptors => {\r\n      this.setState(\r\n        {\r\n          descriptors\r\n        },\r\n        () => {\r\n          this.showLoading(false);\r\n        }\r\n      );\r\n    });\r\n    this.setState({\r\n      selectedItem: null\r\n    });\r\n    this.shortcutHandlers.esc();\r\n    setAimvCanvasRef(this.canvasRef);\r\n  }\r\n\r\n  canvasHandlers = {\r\n    onAdd: target => {\r\n      const { editing } = this.state;\r\n      this.forceUpdate();\r\n      if (!editing) {\r\n        this.changeEditing(true);\r\n      }\r\n      if (target.type === \"activeSelection\") {\r\n        this.canvasHandlers.onSelect(null);\r\n        return;\r\n      }\r\n      this.canvasRef.handler.select(target);\r\n    },\r\n    onSelect: target => {\r\n      const { selectedItem } = this.state;\r\n      if (\r\n        target &&\r\n        target.id &&\r\n        target.id !== \"workarea\" &&\r\n        target.type !== \"activeSelection\"\r\n      ) {\r\n        if (selectedItem && target.id === selectedItem.id) {\r\n          return;\r\n        }\r\n        this.canvasRef.handler.getObjects().forEach(obj => {\r\n          if (obj) {\r\n            this.canvasRef.handler.animationHandler.initAnimation(obj, true);\r\n          }\r\n        });\r\n        this.setState({\r\n          selectedItem: target\r\n        });\r\n        return;\r\n      }\r\n      this.canvasRef.handler.getObjects().forEach(obj => {\r\n        if (obj) {\r\n          this.canvasRef.handler.animationHandler.initAnimation(obj, true);\r\n        }\r\n      });\r\n      this.setState({\r\n        selectedItem: null\r\n      });\r\n    },\r\n    onRemove: () => {\r\n      const { editing } = this.state;\r\n      if (!editing) {\r\n        this.changeEditing(true);\r\n      }\r\n      this.canvasHandlers.onSelect(null);\r\n    },\r\n    onModified: debounce(() => {\r\n      const { editing } = this.state;\r\n      this.forceUpdate();\r\n      if (!editing) {\r\n        this.changeEditing(true);\r\n      }\r\n    }, 300),\r\n    onZoom: zoom => {\r\n      this.setState({\r\n        zoomRatio: zoom\r\n      });\r\n    },\r\n    onChange: (selectedItem, changedValues, allValues) => {\r\n      const { editing } = this.state;\r\n      if (!editing) {\r\n        this.changeEditing(true);\r\n      }\r\n      const changedKey = Object.keys(changedValues)[0];\r\n      const changedValue = changedValues[changedKey];\r\n      if (allValues.workarea) {\r\n        this.canvasHandlers.onChangeWokarea(\r\n          changedKey,\r\n          changedValue,\r\n          allValues.workarea\r\n        );\r\n        return;\r\n      }\r\n      if (changedKey === \"width\" || changedKey === \"height\") {\r\n        this.canvasRef.handler.scaleToResize(allValues.width, allValues.height);\r\n        return;\r\n      }\r\n      if (changedKey === \"locked\") {\r\n        this.canvasRef.handler.setObject({\r\n          lockMovementX: changedValue,\r\n          lockMovementY: changedValue,\r\n          hasControls: !changedValue,\r\n          hoverCursor: changedValue ? \"pointer\" : \"move\",\r\n          editable: !changedValue,\r\n          locked: changedValue\r\n        });\r\n        return;\r\n      }\r\n      if (\r\n        changedKey === \"file\" ||\r\n        changedKey === \"src\" ||\r\n        changedKey === \"code\"\r\n      ) {\r\n        if (selectedItem.type === \"image\") {\r\n          this.canvasRef.handler.setImageById(selectedItem.id, changedValue);\r\n        } else if (selectedItem.superType === \"element\") {\r\n          this.canvasRef.handler.elementHandler.setById(\r\n            selectedItem.id,\r\n            changedValue\r\n          );\r\n        }\r\n        return;\r\n      }\r\n      if (changedKey === \"link\") {\r\n        const link = Object.assign({}, defaultOption.link, allValues.link);\r\n        this.canvasRef.handler.set(changedKey, link);\r\n        return;\r\n      }\r\n      if (changedKey === \"tooltip\") {\r\n        const tooltip = Object.assign(\r\n          {},\r\n          defaultOption.tooltip,\r\n          allValues.tooltip\r\n        );\r\n        this.canvasRef.handler.set(changedKey, tooltip);\r\n        return;\r\n      }\r\n      if (changedKey === \"animation\") {\r\n        const animation = Object.assign(\r\n          {},\r\n          defaultOption.animation,\r\n          allValues.animation\r\n        );\r\n        this.canvasRef.handler.set(changedKey, animation);\r\n        return;\r\n      }\r\n      if (changedKey === \"icon\") {\r\n        const { unicode, styles } = changedValue[Object.keys(changedValue)[0]];\r\n        const uni = parseInt(unicode, 16);\r\n        if (styles[0] === \"brands\") {\r\n          this.canvasRef.handler.set(\"fontFamily\", \"Font Awesome 5 Brands\");\r\n        } else if (styles[0] === \"regular\") {\r\n          this.canvasRef.handler.set(\"fontFamily\", \"Font Awesome 5 Regular\");\r\n        } else {\r\n          this.canvasRef.handler.set(\"fontFamily\", \"Font Awesome 5 Free\");\r\n        }\r\n        this.canvasRef.handler.set(\"text\", String.fromCodePoint(uni));\r\n        this.canvasRef.handler.set(\"icon\", changedValue);\r\n        return;\r\n      }\r\n      if (changedKey === \"shadow\") {\r\n        if (allValues.shadow.enabled) {\r\n          if (\"blur\" in allValues.shadow) {\r\n            this.canvasRef.handler.setShadow(allValues.shadow);\r\n          } else {\r\n            this.canvasRef.handler.setShadow({\r\n              enabled: true,\r\n              blur: 15,\r\n              offsetX: 10,\r\n              offsetY: 10\r\n            });\r\n          }\r\n        } else {\r\n          this.canvasRef.handler.setShadow(null);\r\n        }\r\n        return;\r\n      }\r\n      if (changedKey === \"fontWeight\") {\r\n        this.canvasRef.handler.set(\r\n          changedKey,\r\n          changedValue ? \"bold\" : \"normal\"\r\n        );\r\n        return;\r\n      }\r\n      if (changedKey === \"fontStyle\") {\r\n        this.canvasRef.handler.set(\r\n          changedKey,\r\n          changedValue ? \"italic\" : \"normal\"\r\n        );\r\n        return;\r\n      }\r\n      if (changedKey === \"textAlign\") {\r\n        this.canvasRef.handler.set(changedKey, Object.keys(changedValue)[0]);\r\n        return;\r\n      }\r\n      if (changedKey === \"trigger\") {\r\n        const trigger = Object.assign(\r\n          {},\r\n          defaultOption.trigger,\r\n          allValues.trigger\r\n        );\r\n        this.canvasRef.handler.set(changedKey, trigger);\r\n        return;\r\n      }\r\n      if (changedKey === \"filters\") {\r\n        const filterKey = Object.keys(changedValue)[0];\r\n        const filterValue = allValues.filters[filterKey];\r\n        if (filterKey === \"gamma\") {\r\n          const rgb = [filterValue.r, filterValue.g, filterValue.b];\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { gamma: rgb }\r\n          );\r\n          return;\r\n        }\r\n        if (filterKey === \"brightness\") {\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { brightness: filterValue.brightness }\r\n          );\r\n          return;\r\n        }\r\n        if (filterKey === \"contrast\") {\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { contrast: filterValue.contrast }\r\n          );\r\n          return;\r\n        }\r\n        if (filterKey === \"saturation\") {\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { saturation: filterValue.saturation }\r\n          );\r\n          return;\r\n        }\r\n        if (filterKey === \"hue\") {\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { rotation: filterValue.rotation }\r\n          );\r\n          return;\r\n        }\r\n        if (filterKey === \"noise\") {\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { noise: filterValue.noise }\r\n          );\r\n          return;\r\n        }\r\n        if (filterKey === \"pixelate\") {\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { blocksize: filterValue.blocksize }\r\n          );\r\n          return;\r\n        }\r\n        if (filterKey === \"blur\") {\r\n          this.canvasRef.handler.imageHandler.applyFilterByType(\r\n            filterKey,\r\n            changedValue[filterKey].enabled,\r\n            { value: filterValue.value }\r\n          );\r\n          return;\r\n        }\r\n        this.canvasRef.handler.imageHandler.applyFilterByType(\r\n          filterKey,\r\n          changedValue[filterKey]\r\n        );\r\n        return;\r\n      }\r\n      if (changedKey === \"chartOption\") {\r\n        try {\r\n          const sandbox = new SandBox();\r\n          const compiled = sandbox.compile(changedValue);\r\n          const { animations, styles } = this.state;\r\n          const chartOption = compiled(\r\n            3,\r\n            animations,\r\n            styles,\r\n            selectedItem.userProperty\r\n          );\r\n          selectedItem.setChartOptionStr(changedValue);\r\n          this.canvasRef.handler.elementHandler.setById(\r\n            selectedItem.id,\r\n            chartOption\r\n          );\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n        return;\r\n      }\r\n      this.canvasRef.handler.set(changedKey, changedValue);\r\n    },\r\n    onChangeWokarea: (changedKey, changedValue, allValues) => {\r\n      if (changedKey === \"layout\") {\r\n        this.canvasRef.handler.workareaHandler.setLayout(changedValue);\r\n        return;\r\n      }\r\n      if (changedKey === \"file\" || changedKey === \"src\") {\r\n        this.canvasRef.handler.workareaHandler.setImage(changedValue);\r\n        return;\r\n      }\r\n      if (changedKey === \"width\" || changedKey === \"height\") {\r\n        this.canvasRef.handler.originScaleToResize(\r\n          this.canvasRef.handler.workarea,\r\n          allValues.width,\r\n          allValues.height\r\n        );\r\n        this.canvasRef.canvas.centerObject(this.canvasRef.handler.workarea);\r\n        return;\r\n      }\r\n      this.canvasRef.handler.workarea.set(changedKey, changedValue);\r\n      this.canvasRef.canvas.requestRenderAll();\r\n    },\r\n    onTooltip: (ref, target) => {\r\n      const value = Math.random() * 10 + 1;\r\n      const { animations, styles } = this.state;\r\n      // const { code } = target.trigger;\r\n      // const compile = SandBox.compile(code);\r\n      // const result = compile(value, animations, styles, target.userProperty);\r\n      // console.log(result);\r\n      return (\r\n        <div>\r\n          <div>\r\n            <div>\r\n              <Button>{target.id}</Button>\r\n            </div>\r\n            <Badge count={value} />\r\n          </div>\r\n        </div>\r\n      );\r\n    },\r\n    onClick: (canvas, target) => {\r\n      const { link } = target;\r\n      if (link.state === \"current\") {\r\n        document.location.href = link.url;\r\n        return;\r\n      }\r\n      window.open(link.url);\r\n    },\r\n    onContext: (ref, event, target) => {\r\n      if ((target && target.id === \"workarea\") || !target) {\r\n        const { layerX: left, layerY: top } = event;\r\n        return (\r\n          <Menu>\r\n            <Menu.SubMenu\r\n              key=\"add\"\r\n              style={{ width: 120 }}\r\n              title={i18n.t(\"action.add\")}\r\n            >\r\n              {this.transformList().map(item => {\r\n                const option = Object.assign({}, item.option, { left, top });\r\n                const newItem = Object.assign({}, item, { option });\r\n                return (\r\n                  <Menu.Item style={{ padding: 0 }} key={item.name}>\r\n                    {this.itemsRef.renderItem(newItem, false)}\r\n                  </Menu.Item>\r\n                );\r\n              })}\r\n            </Menu.SubMenu>\r\n          </Menu>\r\n        );\r\n      }\r\n      if (target.type === \"activeSelection\") {\r\n        return (\r\n          <Menu>\r\n            <Menu.Item\r\n              onClick={() => {\r\n                this.canvasRef.handler.toGroup();\r\n              }}\r\n            >\r\n              {i18n.t(\"action.object-group\")}\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              onClick={() => {\r\n                this.canvasRef.handler.duplicate();\r\n              }}\r\n            >\r\n              {i18n.t(\"action.clone\")}\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              onClick={() => {\r\n                this.canvasRef.handler.remove();\r\n              }}\r\n            >\r\n              {i18n.t(\"action.delete\")}\r\n            </Menu.Item>\r\n          </Menu>\r\n        );\r\n      }\r\n      if (target.type === \"group\") {\r\n        return (\r\n          <Menu>\r\n            <Menu.Item\r\n              onClick={() => {\r\n                this.canvasRef.handler.toActiveSelection();\r\n              }}\r\n            >\r\n              {i18n.t(\"action.object-ungroup\")}\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              onClick={() => {\r\n                this.canvasRef.handler.duplicate();\r\n              }}\r\n            >\r\n              {i18n.t(\"action.clone\")}\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              onClick={() => {\r\n                this.canvasRef.handler.remove();\r\n              }}\r\n            >\r\n              {i18n.t(\"action.delete\")}\r\n            </Menu.Item>\r\n          </Menu>\r\n        );\r\n      }\r\n      return (\r\n        <Menu>\r\n          <Menu.Item\r\n            onClick={() => {\r\n              this.canvasRef.handler.duplicateById(target.id);\r\n            }}\r\n          >\r\n            {i18n.t(\"action.clone\")}\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            onClick={() => {\r\n              this.canvasRef.handler.removeById(target.id);\r\n            }}\r\n          >\r\n            {i18n.t(\"action.delete\")}\r\n          </Menu.Item>\r\n        </Menu>\r\n      );\r\n    },\r\n    onTransaction: transaction => {\r\n      this.forceUpdate();\r\n    }\r\n  };\r\n\r\n  handlers = {\r\n    onChangePreview: checked => {\r\n      this.setState(\r\n        {\r\n          preview: typeof checked === \"object\" ? false : checked\r\n        },\r\n        () => {\r\n          if (this.state.preview) {\r\n            const data = this.canvasRef.handler\r\n              .exportJSON()\r\n              .objects.filter(obj => {\r\n                if (!obj.id) {\r\n                  return false;\r\n                }\r\n                return true;\r\n              });\r\n            this.preview.canvasRef.handler.importJSON(data);\r\n            return;\r\n          }\r\n          this.preview.canvasRef.handler.clear();\r\n        }\r\n      );\r\n    },\r\n    onProgress: progress => {\r\n      this.setState({\r\n        progress\r\n      });\r\n    },\r\n    onImport: files => {\r\n      if (files) {\r\n        this.showLoading(true);\r\n        setTimeout(() => {\r\n          const reader = new FileReader();\r\n          reader.onprogress = e => {\r\n            if (e.lengthComputable) {\r\n              const progress = parseInt((e.loaded / e.total) * 100, 10);\r\n              this.handlers.onProgress(progress);\r\n            }\r\n          };\r\n          reader.onload = e => {\r\n            const { objects, animations, styles, dataSources } = JSON.parse(\r\n              e.target.result\r\n            );\r\n            this.setState({\r\n              animations,\r\n              styles,\r\n              dataSources\r\n            });\r\n            if (objects) {\r\n              this.canvasRef.handler.clear(true);\r\n              const data = objects.filter(obj => {\r\n                if (!obj.id) {\r\n                  return false;\r\n                }\r\n                return true;\r\n              });\r\n              this.canvasRef.handler.importJSON(JSON.stringify(data));\r\n            }\r\n          };\r\n          reader.onloadend = () => {\r\n            this.showLoading(false);\r\n          };\r\n          reader.onerror = () => {\r\n            this.showLoading(false);\r\n          };\r\n          reader.readAsText(files[0]);\r\n        }, 500);\r\n      }\r\n    },\r\n    onUpload: () => {\r\n      const inputEl = document.createElement(\"input\");\r\n      inputEl.accept = \".json\";\r\n      inputEl.type = \"file\";\r\n      inputEl.hidden = true;\r\n      inputEl.onchange = e => {\r\n        this.handlers.onImport(e.target.files);\r\n      };\r\n      document.body.appendChild(inputEl); // required for firefox\r\n      inputEl.click();\r\n      inputEl.remove();\r\n    },\r\n    onDownload: () => {\r\n      this.showLoading(true);\r\n      const objects = this.canvasRef.handler\r\n        .exportJSON()\r\n        .objects.filter(obj => {\r\n          if (!obj.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n      const { animations, styles, dataSources } = this.state;\r\n      const exportDatas = {\r\n        objects,\r\n        animations,\r\n        styles,\r\n        dataSources\r\n      };\r\n      const anchorEl = document.createElement(\"a\");\r\n      anchorEl.href = `data:text/json;charset=utf-8,${encodeURIComponent(\r\n        JSON.stringify(exportDatas, null, \"\\t\")\r\n      )}`;\r\n      anchorEl.download = `${this.canvasRef.handler.workarea.name ||\r\n        \"sample\"}.json`;\r\n      document.body.appendChild(anchorEl); // required for firefox\r\n      anchorEl.click();\r\n      anchorEl.remove();\r\n      this.showLoading(false);\r\n    },\r\n    onChangeAnimations: animations => {\r\n      if (!this.state.editing) {\r\n        this.changeEditing(true);\r\n      }\r\n      this.setState({\r\n        animations\r\n      });\r\n    },\r\n    onChangeStyles: styles => {\r\n      if (!this.state.editing) {\r\n        this.changeEditing(true);\r\n      }\r\n      this.setState({\r\n        styles\r\n      });\r\n    },\r\n    onChangeDataSources: dataSources => {\r\n      if (!this.state.editing) {\r\n        this.changeEditing(true);\r\n      }\r\n      this.setState({\r\n        dataSources\r\n      });\r\n    },\r\n    onSaveImage: () => {\r\n      this.canvasRef.handler.saveCanvasImage();\r\n    }\r\n  };\r\n\r\n  shortcutHandlers = {\r\n    esc: () => {\r\n      document.addEventListener(\"keydown\", e => {\r\n        if (e.keyCode === 27) {\r\n          this.handlers.onChangePreview(false);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  transformList = () => {\r\n    return Object.values(this.state.descriptors).reduce(\r\n      (prev, curr) => prev.concat(curr),\r\n      []\r\n    );\r\n  };\r\n\r\n  showLoading = loading => {\r\n    this.setState({\r\n      loading\r\n    });\r\n  };\r\n\r\n  changeEditing = editing => {\r\n    this.setState({\r\n      editing\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      preview,\r\n      selectedItem,\r\n      zoomRatio,\r\n      loading,\r\n      progress,\r\n      animations,\r\n      styles,\r\n      dataSources,\r\n      editing,\r\n      descriptors\r\n    } = this.state;\r\n    const {\r\n      onAdd,\r\n      onRemove,\r\n      onSelect,\r\n      onModified,\r\n      onChange,\r\n      onZoom,\r\n      onTooltip,\r\n      onClick,\r\n      onContext,\r\n      onTransaction\r\n    } = this.canvasHandlers;\r\n    const {\r\n      onChangePreview,\r\n      onDownload,\r\n      onUpload,\r\n      onChangeAnimations,\r\n      onChangeStyles,\r\n      onChangeDataSources,\r\n      onSaveImage\r\n    } = this.handlers;\r\n    const action = (\r\n      <React.Fragment>\r\n        <CommonButton\r\n          className=\"rde-action-btn\"\r\n          shape=\"circle\"\r\n          icon=\"file-download\"\r\n          disabled={!editing}\r\n          tooltipTitle={i18n.t(\"action.download\")}\r\n          onClick={onDownload}\r\n          tooltipPlacement=\"bottomRight\"\r\n        />\r\n        {editing ? (\r\n          <Popconfirm\r\n            title={i18n.t(\"imagemap.imagemap-editing-confirm\")}\r\n            okText={i18n.t(\"action.ok\")}\r\n            cancelText={i18n.t(\"action.cancel\")}\r\n            onConfirm={onUpload}\r\n            placement=\"bottomRight\"\r\n          >\r\n            <CommonButton\r\n              className=\"rde-action-btn\"\r\n              shape=\"circle\"\r\n              icon=\"file-upload\"\r\n              tooltipTitle={i18n.t(\"action.upload\")}\r\n              tooltipPlacement=\"bottomRight\"\r\n            />\r\n          </Popconfirm>\r\n        ) : (\r\n          <CommonButton\r\n            className=\"rde-action-btn\"\r\n            shape=\"circle\"\r\n            icon=\"file-upload\"\r\n            tooltipTitle={i18n.t(\"action.upload\")}\r\n            tooltipPlacement=\"bottomRight\"\r\n            onClick={onUpload}\r\n          />\r\n        )}\r\n        <CommonButton\r\n          className=\"rde-action-btn\"\r\n          shape=\"circle\"\r\n          icon=\"image\"\r\n          tooltipTitle={i18n.t(\"action.image-save\")}\r\n          onClick={onSaveImage}\r\n          tooltipPlacement=\"bottomRight\"\r\n        />\r\n      </React.Fragment>\r\n    );\r\n    const titleContent = (\r\n      <React.Fragment>\r\n        <span>{i18n.t(\"imagemap.imagemap-editor\")}</span>\r\n      </React.Fragment>\r\n    );\r\n    const title = <ImageMapTitle title={titleContent} action={action} />;\r\n    const content = (\r\n      <div className=\"rde-editor\">\r\n        {/* <ImageMapItems\r\n          ref={c => {\r\n            this.itemsRef = c;\r\n          }}\r\n          canvasRef={this.canvasRef}\r\n          descriptors={descriptors}\r\n        /> */}\r\n        <div className=\"rde-editor-canvas-container\">\r\n          <div className=\"rde-editor-header-toolbar\">\r\n            <AICRImageEditorToolbar\r\n              canvasRef={this.canvasRef}\r\n              selectedItem={selectedItem}\r\n              onSelect={onSelect}\r\n            />\r\n          </div>\r\n          <div\r\n            ref={c => {\r\n              this.container = c;\r\n            }}\r\n            className=\"rde-editor-canvas\"\r\n          >\r\n            <Canvas\r\n              ref={c => {\r\n                this.canvasRef = c;\r\n              }}\r\n              minZoom={30}\r\n              defaultOption={defaultOption}\r\n              propertiesToInclude={propertiesToInclude}\r\n              onModified={onModified}\r\n              onAdd={onAdd}\r\n              onRemove={onRemove}\r\n              onSelect={onSelect}\r\n              onZoom={onZoom}\r\n              onTooltip={onTooltip}\r\n              onClick={onClick}\r\n              //onContext={onContext}\r\n              onTransaction={onTransaction}\r\n              keyEvent={{\r\n                transaction: true\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"rde-editor-footer-toolbar\">\r\n            <ImageMapFooterToolbar\r\n              canvasRef={this.canvasRef}\r\n              preview={preview}\r\n              onChangePreview={onChangePreview}\r\n              zoomRatio={zoomRatio}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <ImageMapConfigurations\r\n          canvasRef={this.canvasRef}\r\n          onChange={onChange}\r\n          selectedItem={selectedItem}\r\n          onChangeAnimations={onChangeAnimations}\r\n          onChangeStyles={onChangeStyles}\r\n          onChangeDataSources={onChangeDataSources}\r\n          animations={animations}\r\n          styles={styles}\r\n          dataSources={dataSources}\r\n        /> */}\r\n        <ImageMapPreview\r\n          ref={c => {\r\n            this.preview = c;\r\n          }}\r\n          preview={preview}\r\n          onChangePreview={onChangePreview}\r\n          onTooltip={onTooltip}\r\n          onClick={onClick}\r\n        />\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"rde-content rde-main\">\r\n        <Container content={content} loading={loading} className=\"\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ imgUpload, dataExtract, common, tplTree }) => {\r\n  return { imgUpload, dataExtract, common, tplTree };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(AICRImageEditor);\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, CardHeader, Col, Row } from \"reactstrap\";\r\nimport { Upload, notification, Button } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions\";\r\nimport ExtractForm from \"./ExtractForm\";\r\nimport AICRImageEditor from \"../EditorLib/components/imagemap/AICRImageEditor\";\r\n\r\nnotification.config({\r\n  placement: \"bottomRight\",\r\n  bottom: 0,\r\n  duration: 2\r\n});\r\n\r\nclass DataExtraction extends Component {\r\n  openNotificationWithIcon = (type, title, description) => {\r\n    notification[type]({\r\n      message: title,\r\n      description: description\r\n    });\r\n  };\r\n  handlePreview = async file => {\r\n    const { resetForm, setCurrentImg, common } = this.props;\r\n    resetForm();\r\n    await common.aimvCanvasRef.handler.workareaHandler.setImage(\r\n      file.url || file.preview\r\n    );\r\n    await setCurrentImg(file.url || file.preview);\r\n  };\r\n  handleRemove = async info => {\r\n    const { delImg, listImg, tplTree } = this.props;\r\n    await delImg(info.uid);\r\n    await listImg(tplTree.selectedTemplateId);\r\n  };\r\n  handleChange = async info => {\r\n    const { common, uploadImg, setCurrentImg, tplTree } = this.props;\r\n    if (info.file.originFileObj) {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", info.file.originFileObj);\r\n      const res = await uploadImg(formData, tplTree.selectedTemplateId);\r\n      //console.log(res);\r\n      if (res.success) {\r\n        await common.aimvCanvasRef.handler.workareaHandler.setImage(res.url);\r\n        await setCurrentImg(res.url);\r\n      }\r\n    }\r\n  };\r\n  componentDidMount = async () => {\r\n    const { listImg, tplTree, setMainMenuId } = this.props;\r\n    setMainMenuId(1);\r\n    try {\r\n      await listImg(tplTree.selectedTemplateId);\r\n      const { imgUpload, setCurrentImg } = this.props;\r\n      await setCurrentImg(imgUpload.fileList[0].url);\r\n    } catch (err) {\r\n      this.props.setHasError({ hasError: true, err });\r\n    }\r\n  };\r\n  handleClick = async () => {\r\n    const {\r\n      dataExtract,\r\n      setLoading,\r\n      extractData,\r\n      tplTree,\r\n      common\r\n    } = this.props;\r\n    const cuid = dataExtract.currentImg.substring(\r\n      dataExtract.currentImg.lastIndexOf(\"/\") + 1\r\n    );\r\n    setLoading(true);\r\n    const res = await extractData(\r\n      cuid,\r\n      tplTree.selectedTemplateId,\r\n      dataExtract.nlpFlag\r\n    );\r\n    if (!res.success) {\r\n      this.openNotificationWithIcon(\r\n        \"error\",\r\n        \"Failed\",\r\n        \"Oops, Something go wrong!\"\r\n      );\r\n    } else {\r\n      await common.aimvCanvasRef.handler.workareaHandler.setImage(\r\n        `${dataExtract.currentImg}?box=1`,\r\n        \"boxedimg\"\r\n      );\r\n      this.openNotificationWithIcon(\"success\", \"Done\", \"Data extracted!\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n  render() {\r\n    const { imgUpload, dataExtract } = this.props;\r\n    const uploadButton = (\r\n      <div>\r\n        <PlusOutlined />\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"data-extraction animated fadeIn\">\r\n        <Row>\r\n          <Col xs=\"12\" sm=\"12\" lg=\"8\" className=\"pr-2\">\r\n            <Card>\r\n              <CardHeader>\r\n                <strong> Scanned Doccument </strong>\r\n                <Button\r\n                  type=\"primary\"\r\n                  className=\"mr-3 ml-3 float-right\"\r\n                  loading={dataExtract.loading}\r\n                  onClick={this.handleClick}\r\n                >\r\n                  Extract data\r\n                </Button>\r\n              </CardHeader>\r\n              <AICRImageEditor></AICRImageEditor>\r\n              <div className=\"clearfix mt-4 ml-3 pb-4\">\r\n                <Upload\r\n                  action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n                  listType=\"picture-card\"\r\n                  fileList={imgUpload.fileList}\r\n                  onPreview={this.handlePreview}\r\n                  onChange={this.handleChange}\r\n                  onRemove={this.handleRemove}\r\n                >\r\n                  {imgUpload.fileList.length >= 8 ? null : uploadButton}\r\n                </Upload>\r\n              </div>\r\n            </Card>\r\n          </Col>\r\n          <Col xs=\"12\" sm=\"12\" lg=\"4\" className=\"pl-2\">\r\n            <Card className=\"extract-form\">\r\n              <CardHeader>\r\n                <strong> Extracted Data </strong>\r\n                <Button\r\n                  type=\"primary\"\r\n                  style={{ backgroundColor: \"green\", borderColor: \"green\" }}\r\n                  className=\"float-right\"\r\n                >\r\n                  Export\r\n                </Button>\r\n              </CardHeader>\r\n              <CardBody className=\"eform-scroll\">\r\n                <ExtractForm />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ imgUpload, dataExtract, common, tplTree }) => {\r\n  return { imgUpload, dataExtract, common, tplTree };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(DataExtraction);\r\n"],"sourceRoot":""}